{"version":3,"sources":["components/BucketForm.js","components/Bucket.js","components/BucketList.js","App.js","index.js"],"names":["BucketForm","props","useState","input","setInput","eagerness","setEagerness","eagernessLevel","handleSubmit","e","preventDefault","onSubmit","id","Math","random","floor","text","handleChange","target","value","edit","className","type","placeholder","name","onChange","onClick","Bucket","setEdit","console","log","bucket","editBucketItem","map","item","index","complete","completeBucketItem","removeBucketItem","BucketList","setBucket","bucketCopy","updatedBucket","newBucket","filter","itemId","newValue","prev","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9759f42c.chunk.js","sourcesContent":["import React, { useState } from \"react\";\n\nfunction BucketForm(props) {\n  const [input, setInput] = useState(\"\");\n  let [eagerness, setEagerness] = useState(\"\");\n\n  // TODO: Use this array in the return statement below\n  const eagernessLevel = [\"high\", \"medium\", \"low\"];\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n\n    if (!eagerness) {\n      eagerness = \"low\";\n    }\n\n    props.onSubmit({\n      id: Math.random(Math.floor() * 1000),\n      text: input,\n      eagerness: eagerness,\n    });\n\n    setInput(\"\");\n    setEagerness(\"\");\n  };\n\n  const handleChange = (e) => {\n    setInput(e.target.value);\n  };\n\n  // First we check to see if \"edit\" prop exists. If not, we render the normal form\n  // If the prop \"edit\" exists, we know to render the update form instead\n  return !props.edit ? (\n    <div>\n      <form className=\"bucket-form\" onSubmit={handleSubmit}>\n        <input\n          type=\"text\"\n          placeholder=\"Add to your bucket list\"\n          value={input}\n          name=\"text\"\n          className=\"bucket-input\"\n          onChange={handleChange}\n        ></input>\n        <div className=\"dropdown\">\n          <button className={`dropbtn ${eagerness}`}>\n            {eagerness || \"Priority\"}\n          </button>\n          <div className=\"dropdown-content\">\n            {/* TODO: Add an onClick event that will set the corresponding eagerness level from the `eagernessLevel` array */}\n            <p onClick={() => setEagerness(eagernessLevel[0])}>Must do</p>\n            <p onClick={() => setEagerness(eagernessLevel[1])}>Want to do</p>\n            <p onClick={() => setEagerness(eagernessLevel[2])}>\n              Take it or leave it\n            </p>\n          </div>\n        </div>\n        <button className=\"bucket-button\">Add bucket list item</button>\n      </form>\n    </div>\n  ) : (\n    <div>\n      <h3>Update entry: {props.edit.value}</h3>\n      <form className=\"bucket-form\" onSubmit={handleSubmit}>\n        <input\n          type=\"text\"\n          placeholder={props.edit.value}\n          value={input}\n          name=\"text\"\n          className=\"bucket-input\"\n          onChange={handleChange}\n        ></input>\n        <div className=\"dropdown\">\n          <button className={`dropbtn ${eagerness}`}>\n            {eagerness || \"Priority\"}\n          </button>\n          <div className=\"dropdown-content\">\n            {/* TODO: Add an onClick event that will set the corresponding eagerness level from the `eagernessLevel` array */}\n            <p onClick={() => setEagerness(eagernessLevel[0])}>Must do</p>\n            <p onClick={() => setEagerness(eagernessLevel[1])}>Want to do</p>\n            <p onClick={() => setEagerness(eagernessLevel[2])}>\n              Take it or leave it\n            </p>\n          </div>\n        </div>\n        <button className=\"bucket-button\">Update</button>\n      </form>\n    </div>\n  );\n}\n\nexport default BucketForm;\n","import React, { useState } from \"react\";\nimport BucketForm from \"./BucketForm\";\n\nfunction Bucket(props) {\n  const [edit, setEdit] = useState({\n    id: null,\n    value: \"\",\n    eagerness: \"\",\n  });\n\n  console.log(props.bucket);\n\n  const submitUpdate = (value) => {\n    // TODO: Write logic to update the `edit` value in state after a user updates an entry in the list\n    props.editBucketItem(edit.id, value);\n\n    // TODO: Set the key:value pairs in the `edit` object back to empty strings\n    setEdit({\n      id: null,\n      value: \"\",\n      eagerness: \"\",\n    });\n  };\n\n  // If the user is attempting to edit an item, render the bucket form with the edit variable passed as a prop\n  if (edit.id) {\n    return <BucketForm edit={edit} onSubmit={submitUpdate} />;\n  }\n\n  return props.bucket.map((item, index) => (\n    // TODO: Add a className of `bucket row complete ${item.eagerness}` for completed items, and `bucket-row ${item.eagerness}` for non-completed items\n\n    // TODO: Add a key attribute set to the value of the index position\n    // Hint: use a ternary operator\n    <div\n      className={\n        item.complete\n          ? `bucket row complete ${item.eagerness}`\n          : `bucket-row ${item.eagerness}`\n      }\n      key={index}\n    >\n      {/* TODO: Add an onClick event that invokes the `completeBucketItem` method passing the item id as a argument */}\n      <div\n        key={index}\n        onClick={() => {\n          props.completeBucketItem(item.id);\n        }}\n      >\n        {/* TODO: Add the item text here */}\n        {item.text}\n      </div>\n      <div className=\"icons\">\n        {/* TODO: Add an onClick event update the `edit` object with the `id`, `value`, and `eagerness` properties */}\n        <p\n          onClick={() => {\n            setEdit({\n              id: item.id,\n              value: item.value,\n              eagerness: item.eagerness,\n            });\n          }}\n        >\n          {\" \"}\n          ‚úèÔ∏è\n        </p>\n\n        {/* TODO: Add an onClick event that will invoke the removeBucketItem method passing in the `item.id` */}\n        <p\n          onClick={() => {\n            props.removeBucketItem(item.id);\n          }}\n        >\n          {\" \"}\n          üóëÔ∏è\n        </p>\n      </div>\n    </div>\n  ));\n}\n\nexport default Bucket;\n","import React, { useState } from \"react\";\nimport BucketForm from \"./BucketForm\";\nimport Bucket from \"./Bucket\";\n\nfunction BucketList() {\n  const [bucket, setBucket] = useState([]);\n\n  // Function to add a bucket list item\n  const addBucketItem = (item) => {\n    // TODO: Write logic to add the new bucket item to the bucket state variable\n    const bucketCopy = [...bucket, item];\n    setBucket(bucketCopy);\n  };\n\n  // Function to mark bucket list item as complete\n  const completeBucketItem = (id) => {\n    // If the ID passed to this function matches the ID of the item that was clicked, mark it as complete\n    let updatedBucket = bucket.map((item) => {\n      // TODO: Write logic that marks an item as complete or incomplete when invoked\n\n      if (item.id === id) {\n        item.complete = true;\n      }\n      return item;\n    });\n\n    setBucket(updatedBucket);\n  };\n\n  // Function to remove bucket list item and update state\n  const removeBucketItem = (id) => {\n    // TODO: Write logic that will return an array of items that don't contain the ID passed to this function\n    const newBucket = bucket.filter((item) => item.id !== id);\n    // TODO: Update the bucket state variable\n    setBucket(newBucket);\n  };\n\n  // Function to edit the bucket list item\n  const editBucketItem = (itemId, newValue) => {\n    // Make sure that the value isn't empty\n    if (!newValue.text) {\n      return;\n    }\n\n    // We use the \"prev\" argument provided with the useState hook to map through our list of items\n    // We then check to see if the item ID matches the id of the item that was clicked and if so, we set it to a new value\n    setBucket((prev) =>\n      prev.map((item) => (item.id === itemId ? newValue : item))\n    );\n  };\n\n  return (\n    <div>\n      <h1>What is on your bucket list?</h1>\n      <BucketForm onSubmit={addBucketItem} />\n      <Bucket\n        bucket={bucket}\n        completeBucketItem={completeBucketItem}\n        removeBucketItem={removeBucketItem}\n        editBucketItem={editBucketItem}\n      ></Bucket>\n    </div>\n  );\n}\n\nexport default BucketList;\n","import './App.css';\nimport BucketList from './components/BucketList';\n\nfunction App() {\n  return (\n    <div className=\"bucket-app\">\n      <BucketList />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}